<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>CODE HOUSE </title>
      <generator uri="https://gohugo.io">Hugo</generator>
    <link>https://code-house.jp/index.xml</link>
    <language>ja_jp</language>
    
    <copyright>Powered by Hugo. Copyright © 2016 code-house.jp</copyright>
    <updated>Fri, 21 Oct 2016 11:00:23 &#43;0900</updated>
    
    <item>
      <title>[OSM] osm.pbfを読み込む２ block編</title>
      <link>https://code-house.jp/2016/10/21/osmpbf2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
      
      <guid>https://code-house.jp/2016/10/21/osmpbf2/</guid>
      <description>
        &lt;h2 id=&#34;宝を探すおっさんの話&#34;&gt;宝を探すおっさんの話&lt;/h2&gt;

&lt;p&gt;あるところにおっさんが住んでいました。そんなおっさんの所に、ある手紙が届きました。&lt;br&gt;
「宝探しの冒険にでませんか？今がその時です」&lt;br&gt;
明らかに胡散臭い手紙です。その手紙にはさらにこう書いてあります。&lt;br&gt;
「&lt;strong&gt;あなたの家から100m先の駅のロッカーに、宝物があります&lt;/strong&gt;。鍵を同封しておきます」&lt;br&gt;
本当に胡散臭いですが、行くだけなら害は無いだろうと、おっさんはその駅へと向かったのでした。&lt;/p&gt;

&lt;p&gt;駅のロッカーに着くと、おっさんは手紙に同封されていたキーでロッカーを開けました。なんと、100円玉と更に次の宝への手紙が入っていたのです。
手紙にはこう書いてありました。&lt;br&gt;
「&lt;strong&gt;次の宝は1500m先の隣の駅のロッカーです&lt;/strong&gt;」&lt;/p&gt;

&lt;p&gt;このようにしておっさんは何千個ものロッカーを渡り歩き、数十万円を手にしましたとさ・・。&lt;/p&gt;

&lt;p&gt;&lt;sub style=&#34;font-size:0.8em&#34;&gt;※この話はフィクションです&lt;/sub&gt;&lt;/p&gt;

&lt;h2 id=&#34;osm-pbfファイルの話&#34;&gt;osm.pbfファイルの話&lt;/h2&gt;

&lt;p&gt;さて、冒頭に変な話を書きました。おっさんは何千個ものロッカーを歩いて旅して、最終的に数十万を手に入れました。果たしてこれは割にあう話なのでしょうか？
もしこれが一日で全てのロッカーを歩き回ったというのなら、割のいい話かもしれません。でも、実際におっさんは一年がかりで旅をしました。おっさんは苦労の割には時間の無駄だなぁと思ったようです。&lt;/p&gt;

&lt;p&gt;こんな話を書いたのは、osm.pbfの中身がこの話に似ている部分があるからです。つまり、ファイルの先頭に&lt;strong&gt;最初のデータの場所&lt;/strong&gt;が書いてあります。そして最初のデータの先頭に、&lt;strong&gt;次のデータの場所&lt;/strong&gt;が書いてあります。このようにosm.pbfもファイルの先頭からたどっていかないと、必要なデータにたどり着けないような構造になっているのです。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;
        <a href='https://code-house.jp/2016/10/21/osmpbf2/' class="read-more"><nobr>Read more →</nobr></a>
      </description>
    </item>
    
    <item>
      <title>[OSM] .osm.pbfファイルを読み込んでみる１</title>
      <link>https://code-house.jp/2016/10/18/osmpbf1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
      
      <guid>https://code-house.jp/2016/10/18/osmpbf1/</guid>
      <description>
        &lt;h2 id=&#34;osm-pbfとは&#34;&gt;.osm.pbfとは？&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://code-house.jp/2016/09/16/osmsummary/&#34;&gt;前回の記事(Open Street Map)&lt;/a&gt;で、Open Street Mapにハマっていたわけですが、blogも更新が滞る中、より一層とハマっていました。今回の記事では、Open Street Mapのデータが全て詰まったファイルであるosm.pbfファイルについて書きたいと思う。&lt;/p&gt;

&lt;p&gt;さて、このファイル。全世界のファイルとなると&lt;strong&gt;33Gを越えるサイズ&lt;/strong&gt;で、そのまま扱うには実に厄介なサイズなのである。中身はzlibで圧縮されているようで単純に読み込んでメモリに展開すると、おそらく60Gを越えるのではないかと思う。なので現実的には少しずつ読み込んで何らかの処理をする(例えば、世界の電車の駅だけを抽出するとか)のであるが、33Gもデータがあると扱い方によってはものすごく時間のかかる処理になるのである。なので&lt;strong&gt;メモリを程々に使って&lt;/strong&gt;(程々といっても数ギガのオーダー。64bitOSでないと扱えない)、そこそこ&lt;strong&gt;高速にデータを処理&lt;/strong&gt;させる必要がある。結構データを扱うのに苦労しハマったので、その顛末について記事にしておく。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;
        <a href='https://code-house.jp/2016/10/18/osmpbf1/' class="read-more"><nobr>Read more →</nobr></a>
      </description>
    </item>
    
    <item>
      <title>[OSM] Open Street Map</title>
      <link>https://code-house.jp/2016/09/16/osmsummary/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
      
      <guid>https://code-house.jp/2016/09/16/osmsummary/</guid>
      <description>
        &lt;h2 id=&#34;open-street-mapとは&#34;&gt;Open Street Mapとは&lt;/h2&gt;

&lt;p&gt;最近、iOSのアプリを作ろうと躍起になっておりブログの更新どころではありませんでした。(10日もあいている！！このブログ最大の危機か？)さらに、iOSのアプリを作るはずが、何故かOpen Street Mapに没頭してました。なお、作りたいアプリは地図に関するアプリなので、Open Street Mapをいじり倒しているのは、脱線や現実逃避ではありません。&lt;/p&gt;

&lt;p&gt;ところで、Open Street Mapとは？&lt;/p&gt;

&lt;p&gt;世の中で一番有名な地図のサイトと言うと、おそらくGoogle Mapsのような気がする。他にも、Yahoo Mapsなど地図のサイトはある。これらの大手企業の地図とは違い、Open Street Mapというのは世界中の有志(英語でCartographer)により作成されている、オープンデータな地図のことである。アカウントを取得すれば誰でも編集ができるよううだ。地図のデータなんてのはGoogleにはかなわないだろうと思っていたのであるが、そんなことはない。調べていくほどにGoogle Mapsとはまた違った意味でOpen Street Mapにはすごい部分がたくさんあることに気がついたのである。&lt;/p&gt;

&lt;p&gt;そんなわけで、Open Street Mapの改めて再認識した面白さについて軽く紹介したいと思う。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;
        <a href='https://code-house.jp/2016/09/16/osmsummary/' class="read-more"><nobr>Read more →</nobr></a>
      </description>
    </item>
    
    <item>
      <title>[swift] CoreDataをさぐりさぐり触ってみた</title>
      <link>https://code-house.jp/2016/09/06/swiftcoredata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
      
      <guid>https://code-house.jp/2016/09/06/swiftcoredata/</guid>
      <description>
        &lt;h2 id=&#34;coredata&#34;&gt;CoreData？？&lt;/h2&gt;

&lt;p&gt;CoreDataは、簡単にいうとiOSでアプリを作った場合にそのデータを保存しておくための仕組みだ。例えばRPGゲームならキャラクターの能力やレベル等のデータを保存したり、メモ帳アプリならメモの内容を保存したりといった用途にCoreDataは使われる。なのでiOSでアプリを作成する場合、このCoreDataというのは避けては通れない道なのである。&lt;/p&gt;

&lt;p&gt;とは言うものの、iOSでのアプリ作成に必要な要素は他にもたくさんある。それらを置いといてswiftに関する記事２つ目にしていきなりCoreDataについて書くのはどうかとも思う。実際少しCoreDataのコードを書いて見たものの、まだ全然自分の中でベストプラクティスと思える状態にはなっていない。なので、この記事は現段階でCoreDataについて試行錯誤してみたという内容の記事である。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;
        <a href='https://code-house.jp/2016/09/06/swiftcoredata/' class="read-more"><nobr>Read more →</nobr></a>
      </description>
    </item>
    
    <item>
      <title>[swift]スマホアプリを作る</title>
      <link>https://code-house.jp/2016/09/04/swiftstart/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
      
      <guid>https://code-house.jp/2016/09/04/swiftstart/</guid>
      <description>
        &lt;h2 id=&#34;スマホアプリを作る&#34;&gt;スマホアプリを作る&lt;/h2&gt;

&lt;p&gt;今の様な形のスマホが世に現れて、もう10年が経とうとしている。スマホアプリを作るというと、もはや既にピークはとうに過ぎており今更感があるのだけど、それでもなお毎日のように新しいアプリがリリースされているのは事実なわけで、そういう意味ではまだギリギリ過渡期なのだと思う。本当はもっと前からスマホアプリを作ってみたかった。だからこのギリギリ過渡期のうちに、これが最後のチャンスだと思って何か作って見たいと思う。&lt;/p&gt;

&lt;p&gt;世の中には、スマホアプリの作り方の書籍や記事が溢れている。中には、「簡単にできる」、「◯◯日でできる」みたいに謳ったものもあるが、実際に本当に取り組もうとすると、あまりにも膨大な知識が必要であることにビビる。それに、アプリによってはサーバを用意したりなど、準備にも膨大な時間が必要である。漠然とスマホアプリの完成までに必要な知識、準備のステップの合計を100とすると、現段階では5前後では無いだろうかと思う。&lt;/p&gt;

&lt;p&gt;しかし、逆に考えると、それだけの新しいことを知ることができる。新しいことを始めることができるというのは、技術者にとってとても幸せなことであるとも思う。それに、この状態からどうのようにしてアプリを作っていくかを少しでも記事にできれば、同じようなことをしている人、またはしようとしている人にとっても何かしらの役に立つんじゃないかと思う。とはいうものの、実際にアプリを作り出すとそちらにばかり時間が取られて、なかなか記事を書いたりする時間がなくなったりするのだけど・・。&lt;/p&gt;

&lt;p&gt;とりあえず、アプリを作成するにあたり何をする必要があるのかをざっくりとリストアップしてみた。今回はその項目をひたすら箇条書きしておく。なを、アプリはiPhoneまたはiPad向けのアプリとし、言語はswiftを使うものとする。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;
        <a href='https://code-house.jp/2016/09/04/swiftstart/' class="read-more"><nobr>Read more →</nobr></a>
      </description>
    </item>
    
    <item>
      <title>[GoogleMap] 表示のしくみ</title>
      <link>https://code-house.jp/2016/08/29/maptilenumber/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
      
      <guid>https://code-house.jp/2016/08/29/maptilenumber/</guid>
      <description>
        &lt;h2 id=&#34;オンライン地図表示のしくみ&#34;&gt;オンライン地図表示のしくみ&lt;/h2&gt;

&lt;p&gt;Google Map、Open Streat map。世の中にはいろいろな地図がある。これらの地図の多くは、小さな正方形の地図画像を並べて敷きつめることによって大きな地図を表示している。とまあ、このようなことは今更記事にしなくても調べればわかる話ではあるのだけど。しかし、今後このブログで書くであろう地図に関する記事の前準備としてメモの意味合いもこめて書いておきたいなあと思う。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;
        <a href='https://code-house.jp/2016/08/29/maptilenumber/' class="read-more"><nobr>Read more →</nobr></a>
      </description>
    </item>
    
    <item>
      <title>[Hugo] werckerを使って記事の公開を自動化する２[高速化]</title>
      <link>https://code-house.jp/2016/08/26/hugowercker2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
      
      <guid>https://code-house.jp/2016/08/26/hugowercker2/</guid>
      <description>
        &lt;h2 id=&#34;hugo記事公開を高速化する&#34;&gt;Hugo記事公開を高速化する&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://code-house.jp/2016/08/24/hugowercker/&#34;&gt;前回の記事&lt;/a&gt;では、標準でよういされているdockerのboxイメージを利用して、werckerを使って記事を公開していた。しかし、記事の公開までに&lt;strong&gt;５〜７分ぐらいの時間がかかっていた。&lt;/strong&gt;これは非常にもどかしい。
今回の記事では、独自のdockerイメージを使うことで高速化を行ってみる。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;
        <a href='https://code-house.jp/2016/08/26/hugowercker2/' class="read-more"><nobr>Read more →</nobr></a>
      </description>
    </item>
    
    <item>
      <title>[gulp] ローカルサーバー編</title>
      <link>https://code-house.jp/2016/08/25/gulpserver/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
      
      <guid>https://code-house.jp/2016/08/25/gulpserver/</guid>
      <description>
        &lt;h2 id=&#34;gulpを使ってローカルサーバーを起動してみる&#34;&gt;gulpを使ってローカルサーバーを起動してみる&lt;/h2&gt;

&lt;p&gt;今回はgulpを使って、ローカル環境でサイトの表示を確認してみる。具体的には下記のようなテスト環境が実行できるようにしてみる。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;プロジェクトの&lt;code&gt;app&lt;/code&gt;フォルダを公開フォルダとしてサーバを起動する。&lt;/li&gt;
&lt;li&gt;サイトにはphpファイルが含まれている。phpも動くサーバを起動する。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;src&lt;/code&gt;フォルダのcoffeeファイルやscssファイルを更新したら、ブラウザを自動でReloadさせる。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;上記を実現するのに、この記事では&lt;strong&gt;&lt;code&gt;browser-sync&lt;/code&gt;、&lt;code&gt;gulp-connect-php&lt;/code&gt;&lt;/strong&gt;を利用する。なお、gulp自体の設定については下記の記事参照。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://code-house.jp/post/gulp/gulpsetting/&#34;&gt;gulpの初期設定&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;
        <a href='https://code-house.jp/2016/08/25/gulpserver/' class="read-more"><nobr>Read more →</nobr></a>
      </description>
    </item>
    
    <item>
      <title>[Hugo] werckerを使って記事の公開を自動化する１</title>
      <link>https://code-house.jp/2016/08/24/hugowercker/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
      
      <guid>https://code-house.jp/2016/08/24/hugowercker/</guid>
      <description>
        &lt;h2 id=&#34;hugoの記事を公開する&#34;&gt;Hugoの記事を公開する&lt;/h2&gt;

&lt;p&gt;下記の記事にも書いた通り、hugoの記事は下記の手順で公開している。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Hugoの元になるプロジェクトは&lt;a href=&#34;https://github.com/mm-git/hugo&#34;&gt;mm-git/hugo&lt;/a&gt;にpushする。(以下元プロジェクトと呼ぶ)&lt;/li&gt;
&lt;li&gt;pushを検出して自動で&lt;code&gt;Hugo&lt;/code&gt;コマンドを実行し、&lt;code&gt;public&lt;/code&gt;フォルダを作成する。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;public&lt;/code&gt;フォルダを公開プロジェクト&lt;a href=&#34;https://github.com/mm-git/mm-git.github.io&#34;&gt;mm-git/mm-git.github.io&lt;/a&gt;にpushする。&lt;/li&gt;
&lt;li&gt;記事が自動的に公開される。&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://vode-house.jp/2016/07/26/githubpages/&#34;&gt;[Hugo] github pagesについて&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;今回の記事は、&lt;strong&gt;hugoコマンドの実行をどうやって自動化するか&lt;/strong&gt;について書いている。自動化には&lt;a href=&#34;http://wercker.com/&#34;&gt;Wercker&lt;/a&gt;を利用してみる。
なお、この&lt;a href=&#34;http://wercker.com/&#34;&gt;Wercker&lt;/a&gt;だが、最近仕様が変わったようで、公式の情報やネットで見つかる情報が古かったりしてハマった。下記の記事が参考になった。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.nabetama.com/post/2016-05-12-30/&#34;&gt;Hugo, github pages, werckerで自動デプロイ 2016/05/12版 · blog.nabetama.com&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;
        <a href='https://code-house.jp/2016/08/24/hugowercker/' class="read-more"><nobr>Read more →</nobr></a>
      </description>
    </item>
    
    <item>
      <title>[gulp] 画像サイズを減らす</title>
      <link>https://code-house.jp/2016/08/21/gulpimagemin/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
      
      <guid>https://code-house.jp/2016/08/21/gulpimagemin/</guid>
      <description>
        &lt;h2 id=&#34;gulpを使って画像のサイズを減らす&#34;&gt;gulpを使って画像のサイズを減らす&lt;/h2&gt;

&lt;p&gt;今回のgulpスクリプトは画像ファイルのサイズ圧縮である。サイトの表示速度アップのために画像の見た目はあまり変わらないままにサイズを減らしてみる。なお今回の記事、&lt;strong&gt;単に&lt;code&gt;gulp-imagemin&lt;/code&gt;を使っているだけ&lt;/strong&gt;である。特に圧縮率を変更したりはしていないので、あまり参考にならないかもしれない。&lt;/p&gt;

&lt;p&gt;gulp自体の設定については下記の記事参照。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://code-house.jp/post/gulp/gulpsetting/&#34;&gt;gulpの初期設定&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;
        <a href='https://code-house.jp/2016/08/21/gulpimagemin/' class="read-more"><nobr>Read more →</nobr></a>
      </description>
    </item>
    
    <item>
      <title>[Hugo] Syntax highlight</title>
      <link>https://code-house.jp/2016/08/20/hugosyntaxhighlight/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
      
      <guid>https://code-house.jp/2016/08/20/hugosyntaxhighlight/</guid>
      <description>
        &lt;h2 id=&#34;hugoでソースコードを綺麗に表示する&#34;&gt;Hugoでソースコードを綺麗に表示する&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://goo.gl/H565BV&#34; width=&#34;50%&#34;&gt;&lt;/p&gt;

&lt;p&gt;このサイトは特にたくさんのソースコードを記事に載せているが、ソースコードを綺麗に色付きで表示するには、HugoのSyntax hightlight機能を有効にする必要がある。しかし、&lt;strong&gt;Syntax Highlight機能をONにするだけで簡単に実現できなかった&lt;/strong&gt;ので記事にしておこうと思う。
さらに、Syntax Highlightの配色として&lt;strong&gt;Solarized&lt;/strong&gt;を使いたかったのだが、これがそのままでは未対応だった。少し工夫が必要だったのでそれも書いておく。&lt;/p&gt;

&lt;p&gt;公式の情報は下記の通り。Hugo V0.15以降で対応しているようだ。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;http://hugodocs.netlify.com/extras/highlighting/&#34;&gt;Hugo – Syntax Highlighting&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;参考になった記事&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;http://qiita.com/hfm/items/3df99e0f94162d454f7a&#34;&gt;hugo で Fence Code Blocks (```)を有効化する - Qiita&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;
        <a href='https://code-house.jp/2016/08/20/hugosyntaxhighlight/' class="read-more"><nobr>Read more →</nobr></a>
      </description>
    </item>
    
    <item>
      <title>[Hugo] タグを追加する</title>
      <link>https://code-house.jp/2016/08/19/hugotaxonomy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
      
      <guid>https://code-house.jp/2016/08/19/hugotaxonomy/</guid>
      <description>
        &lt;h2 id=&#34;タグ一覧ページと記事の先頭にタグを追加&#34;&gt;タグ一覧ページと記事の先頭にタグを追加&lt;/h2&gt;

&lt;p&gt;Hugoの記事は、markdownファイルの先頭に下記の様に書くことで、その記事にタグを付けることができる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;tags = [&amp;quot;Hugo&amp;quot;, &amp;quot;html&amp;quot;, ...]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ただしこれらの一覧を表示したり、記事の先頭にタグを表示したりするには、layoutsフォルダ以下のテンプレートを追加、作成しないといけない。最終的には下記の様に対応を行ったが、これもなかなかわかりにくかったので記事にしておく。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;http://baseurl/tags&lt;/code&gt;でタグ一覧ページを表示する。&lt;/li&gt;
&lt;li&gt;例えば&lt;code&gt;Hugo&lt;/code&gt;に関する記事の場合、&lt;code&gt;http://baseurl/tags/hugo&lt;/code&gt;でその一覧を表示する。&lt;/li&gt;
&lt;li&gt;各記事の先頭にタグを表示する。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;
        <a href='https://code-house.jp/2016/08/19/hugotaxonomy/' class="read-more"><nobr>Read more →</nobr></a>
      </description>
    </item>
    
    <item>
      <title>[GoogleMaps] Node.jsを使ったgoogle mapの初期化</title>
      <link>https://code-house.jp/2016/08/18/mapinitialize/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
      
      <guid>https://code-house.jp/2016/08/18/mapinitialize/</guid>
      <description>
        &lt;h2 id=&#34;node-js-coffeescript-backbone-jsでgoogle-map&#34;&gt;Node.js、coffeescript、Backbone.jsでgoogle map？？&lt;/h2&gt;

&lt;p&gt;今回の記事ではNode.js、coffeescript、Backbone.jsを使って、サクッとgoogle mapを初期化してみようと思う。最近の流行りとして、node.jsはわかるものの、coffeescriptとBackbone.jsはどうなのよ？と言われそうである。今から何かを始めるのであれば、JavascriptはES2015、ES2016あたりで記載すべきだと思うし、フレームワークはReactとかを使いたいところである。しかし、現在作成しているwebアプリが上記のタイトルの構成なのでそれで説明をしたいと思う。coffeescriptはともかく、Backbone.jsはそれなりに使いやすいし、まだ現役ではあると思う。&lt;/p&gt;

&lt;p&gt;この記事用にgithubのレポジトリを作成してみたので参考に。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/mm-git/googleMapsSample&#34;&gt;mm-git/googleMapsSample&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;今回の記事では画面全体に地図を表示するまでを説明するが、&lt;strong&gt;この方法が楽なポイントは下記の通りである。&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;htmlファイルで、google mapsのapiやjqueryなどの読込が&lt;strong&gt;不要&lt;/strong&gt;。(ビルド済みのjsファイルだけ読み込めばOK!!)&lt;/li&gt;
&lt;li&gt;google mapsの初期化を待ってから何かの処理する場合のスクリプトが&lt;strong&gt;簡潔に書ける&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;
        <a href='https://code-house.jp/2016/08/18/mapinitialize/' class="read-more"><nobr>Read more →</nobr></a>
      </description>
    </item>
    
    <item>
      <title>[gulp] coffee script編</title>
      <link>https://code-house.jp/2016/08/17/gulpcoffee/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
      
      <guid>https://code-house.jp/2016/08/17/gulpcoffee/</guid>
      <description>
        &lt;h2 id=&#34;gulp-を使った-coffee-js-min-js変換&#34;&gt;gulp を使った coffee→js, min.js変換&lt;/h2&gt;

&lt;p&gt;gulpのスクリプト編の続きです。&lt;code&gt;.coffee&lt;/code&gt;を&lt;code&gt;.js&lt;/code&gt;及び&lt;code&gt;.min.js&lt;/code&gt;に変換してみる。変換にはwebpackを使います。gulp自体の設定については下記の記事参照。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://code-house.jp/post/gulp/gulpsetting/&#34;&gt;gulpの初期設定&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;
        <a href='https://code-house.jp/2016/08/17/gulpcoffee/' class="read-more"><nobr>Read more →</nobr></a>
      </description>
    </item>
    
    <item>
      <title>[Hugo] ページネーションを追加する</title>
      <link>https://code-house.jp/2016/08/16/hugopagination/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
      
      <guid>https://code-house.jp/2016/08/16/hugopagination/</guid>
      <description>
        &lt;h2 id=&#34;ブログ一覧ページの追加&#34;&gt;ブログ一覧ページの追加&lt;/h2&gt;

&lt;p&gt;このサイトは&lt;code&gt;hugo-uno&lt;/code&gt;というベーステーマを元に作成している。しかし、このテーマはトップページに最新の記事を１０個だけ表示するようになっていた。また、&lt;code&gt;index.html#blog&lt;/code&gt;というハッシュを付けた場合に一覧を表示するようになっている(カバーページと一覧ページを同一のhtmlで切り替えて表示するようになている)。&lt;/p&gt;

&lt;p&gt;これを下記のように変更したいのだが、これがなかなかわかりにくくて、特に下記の★の２つはだいぶ調べるのに時間がかかった。最終的には対応できたのでこれを記事にしておきたいと思う。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;rootのindex.htmlはカバーページ専用とする。

&lt;ul&gt;
&lt;li&gt;この変更についてはこの記事では説明しない。変更点は&lt;a href=&#34;https://github.com/mm-git/hugo&#34;&gt;mm-git/hugo&lt;/a&gt;参照。&lt;code&gt;layouts/index.html&lt;/code&gt;, &lt;code&gt;static/js/main.js&lt;/code&gt;あたりを変更している。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;blog&lt;/code&gt;、&lt;code&gt;work&lt;/code&gt;といったセクションごとに、記事の一覧を作成する。★&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;blog&lt;/code&gt;は５記事毎にページを切り替えるようにする。★&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;work&lt;/code&gt;は同一ページに全一覧を載せる。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;
        <a href='https://code-house.jp/2016/08/16/hugopagination/' class="read-more"><nobr>Read more →</nobr></a>
      </description>
    </item>
    
  </channel>
</rss>
